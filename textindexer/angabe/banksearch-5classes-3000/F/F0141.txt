
Visual Basic and IP Helper API: How to retrieve TCP statistics
	
 
 
 
 
 
 
	
 
 
 
 
 
 
	 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 	Home -
 	 What's New - Tools&Technologies -
 	 Resources - Books
 - Forum
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Home -
 Tools&Technologies -
 IP Helper API - How to
 retrieve TCP statistics 
 
 
 
 
 
 
 
 
 
 
[Advertisement] 
 
 
 
 
 
 	
 
 
 
 
 
 
[Search vbip.com] 
 
 
 
 
 
	 
	
	
 
 
 
 
 
 
[Search other VB sites] 
 
 
 
 
	 
	
	 
 
 
 
 
 
[Featured Book] 
 
 
 
 
 
 
 
 
 
[Newsletter] 
 
 
 
 
 
 
 
 
 
 
 
 HTML
 Text 
 
 
 
 
 
 
 
 
 [Partners]
 
	
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
	
	
	
 
 
 
 
 
 
 
 
 
 How to retrieve TCP statistics
 
 
 
 
 
 
 
 
 
 
 
 
 
 Download 
 TCP statistics project 
 
 
 
 
 
 
 
 
 
 
The GetTcpStatistics function of the IP Helper API allows to retrieve the TCP statistics for the
 local computer. In the screenshot of
 the sample application you can see what information can be retrieved with
 that function: 
 
 
 
 
 
 I use this application every day, it works as an "is my Internet
 connection still alive?" indicator. It resides in the system tray and imitates
 behavior of the DUN system tray icon. I think, it is a very useful feature
 :), if you use the LAN connection to access the Internet. 
 
 
 
 
 
 Usage of the GetTcpStatistics function is very simple, you will see how to
 use it in the source code below. To implement the system tray icon I have
 used source code from MS KB article. 
 
 
 
 
 
Option Explicit 
 
'user defined type required by Shell_NotifyIcon API call 
Private Type NOTIFYICONDATA 
 cbSize As Long 
 hwnd As Long 
 uId As Long 
 uFlags As Long 
 uCallBackMessage As Long 
 hIcon As Long 
 szTip As String * 64 
End Type 
 
'constants required by Shell_NotifyIcon API call: 
Private Const NIM_ADD = &H0 
Private Const NIM_MODIFY = &H1 
Private Const NIM_DELETE = &H2 
Private Const NIF_MESSAGE = &H1 
Private Const NIF_ICON = &H2 
Private Const NIF_TIP = &H4 
Private Const WM_MOUSEMOVE = &H200 
Private Const WM_LBUTTONDOWN = &H201 'Button down 
Private Const WM_LBUTTONUP = &H202 'Button up 
Private Const WM_LBUTTONDBLCLK = &H203 'Double-click 
Private Const WM_RBUTTONDOWN = &H204 'Button down 
Private Const WM_RBUTTONUP = &H205 'Button up 
Private Const WM_RBUTTONDBLCLK = &H206 'Double-click 
 
Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long 
Private Declare Function Shell_NotifyIcon Lib "shell32" Alias "Shell_NotifyIconA" _ 
 (ByVal dwMessage As Long, pnid As NOTIFYICONDATA) As Boolean 
 
Private nid As NOTIFYICONDATA 
 
'user defined type required by GetTcpStatistics API call 
Private Type MIB_TCPSTATS 
 dwRtoAlgorithm As Long '// timeout algorithm 
 dwRtoMin As Long  '// minimum timeout 
 dwRtoMax As Long '// maximum timeout 
 dwMaxConn As Long '// maximum connections 
 dwActiveOpens As Long '// active opens 
 dwPassiveOpens As Long '// passive opens 
 dwAttemptFails As Long '// failed attempts 
 dwEstabResets As Long '// establised connections reset 
 dwCurrEstab As Long '// established connections 
 dwInSegs As Long '// segments received 
 dwOutSegs As Long  '// segment sent 
 dwRetransSegs As Long '// segments retransmitted 
 dwInErrs As Long '// incoming errors 
 dwOutRsts As Long '// outgoing resets 
 dwNumConns As Long  '// cumulative connections 
End Type 
 
Private Declare Function GetTcpStatistics Lib "iphlpapi.dll" (pStats As MIB_TCPSTATS) As Long 
 
Private Sub cmdExit_Click() 
 Unload Me 
End Sub 
 
Private Sub cmdHide_Click() 
 Me.Hide 
End Sub 
 
Private Sub Form_Load() 
 ' 
 'Configure the ListView control 
 ' 
 With ListView1.ListItems 
 ' 
 .Add , , "Timeout algorithm" 
 .Add , , "Minimum timeout" 
 .Add , , "Maximum timeout" 
 .Add , , "Maximum connections" 
 .Add , , "Active opens" 
 .Add , , "Passive opens" 
 .Add , , "Failed attempts" 
 .Add , , "Establised connections reset" 
 .Add , , "Established connections" 
 .Add , , "Segments received" 
 .Add , , "Segment sent" 
 .Add , , "Segments retransmitted" 
 .Add , , "Incoming errors" 
 .Add , , "Outgoing resets" 
 .Add , , "Cumulative connections" 
 ' 
 End With 
 ' 
 'The system tray code 
 ' 
 'the form must be fully visible before calling Shell_NotifyIcon 
 Me.Show 
 Me.Refresh 
 With nid 
 .cbSize = Len(nid) 
 .hwnd = Me.hwnd 
 .uId = vbNull 
 .uFlags = NIF_ICON Or NIF_TIP Or NIF_MESSAGE 
 .uCallBackMessage = WM_MOUSEMOVE 
 .hIcon = ImageList1.ListImages(4).Picture 
 .szTip = "TCP Statistics" & vbNullChar 
 End With 
 '     
 Shell_NotifyIcon NIM_ADD, nid 
 ' 
End Sub 
 
Private Sub Form_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single) 
 ' 
 'this procedure receives the callbacks from the System Tray icon. 
 ' 
 Dim Result As Long 
 Dim msg As Long 
 ' 
 'the value of X will vary depending upon the scalemode setting 
 ' 
 If Me.ScaleMode = vbPixels Then 
 msg = X 
 Else 
 msg = X / Screen.TwipsPerPixelX 
 End If 
 ' 
 Select Case msg 
 Case WM_LBUTTONUP '514 restore form window 
 Me.WindowState = vbNormal 
 Result = SetForegroundWindow(Me.hwnd) 
 Me.Show 
 Case WM_LBUTTONDBLCLK '515 restore form window 
 Me.WindowState = vbNormal 
 Result = SetForegroundWindow(Me.hwnd) 
 Me.Show 
 Case WM_RBUTTONUP '517 display popup menu 
 Result = SetForegroundWindow(Me.hwnd) 
 Me.PopupMenu Me.mPopupSys 
 End Select 
 ' 
End Sub 
 
Private Sub Form_Resize() 
 ' 
 'this is necessary to assure that the minimized window is hidden 
 ' 
 If Me.WindowState = vbMinimized Then Me.Hide 
 ' 
End Sub 
 
Private Sub Form_Unload(Cancel As Integer) 
 ' 
 'this removes the icon from the system tray 
 ' 
 Shell_NotifyIcon NIM_DELETE, nid 
 ' 
End Sub 
 
Private Sub ListView1_ItemClick(ByVal Item As MSComctlLib.ListItem) 
 ' 
    Select Case Item.Index 
 Case 1 
 lblDesc.Caption = "Specifies the retransmission time-out " & _ 
 "(RTO) algorithm in use." 
 Case 2 
 lblDesc.Caption = "Specifies the minimum retransmission time-out" & _ 
 " value in milliseconds." 
 Case 3 
 lblDesc.Caption = "Specifies the maximum retransmission time-out " & _ 
 "value in milliseconds." 
 Case 4 
 lblDesc.Caption = "Specifies the maximum number of connections. " & _ 
 "If this member is -1, the maximum number of " & _ 
 "connections is dynamic." 
 Case 5 
 lblDesc.Caption = "Specifies the number of active opens. In an " & _ 
 "active open, the client is initiating a connection" & _ 
 " with the server." 
 Case 6 
 lblDesc.Caption = "Specifies the number of passive opens. In a passive " & _ 
 "open, the server is listening for a connection" & _ 
 " request from a client." 
 Case 7 
 lblDesc.Caption = "Specifies the number of failed connection attempts." 
 Case 8 
 lblDesc.Caption = "Specifies the number of established connections " & _ 
 "that have been reset." 
 Case 9 
 lblDesc.Caption = "Specifies the number of currently established connections." 
 Case 10 
 lblDesc.Caption = "Specifies the number of segments received." 
 Case 11 
 lblDesc.Caption = "Specifies the number of segments transmitted. " & _ 
 "This number does not include retransmitted segments." 
 Case 12 
 lblDesc.Caption = "Specifies the number of segments retransmitted." 
 Case 13 
 lblDesc.Caption = "Specifies the number of errors received." 
 Case 14 
 lblDesc.Caption = "Specifies the number of segments transmitted with " & _ 
 "the reset flag set." 
 Case 15 
 lblDesc.Caption = "Specifies the cumulative number of connections." 
 End Select 
 ' 
End Sub 
 
Private Sub Timer1_Timer() 
 UpdateStats 
End Sub 
 
Private Sub UpdateStats() 
 ' 
 Dim tStats As MIB_TCPSTATS 
 Static tStaticStats As MIB_TCPSTATS 
 ' 
 Dim lRetValue As Long 
 ' 
 Dim blnIsSent As Boolean 
 Dim blnIsRecv As Boolean 
 ' 
 lRetValue = GetTcpStatistics(tStats) 
 ' 
 With tStats 
 ' 
        If Not tStaticStats.dwRtoAlgorithm = .dwRtoAlgorithm Then _ 
 ListView1.ListItems(1).SubItems(1) = .dwRtoAlgorithm 
 If Not tStaticStats.dwRtoMin = .dwRtoMin Then _ 
 ListView1.ListItems(2).SubItems(1) = .dwRtoMin 
 If Not tStaticStats.dwRtoMax = .dwRtoMax Then _ 
 ListView1.ListItems(3).SubItems(1) = .dwRtoMax 
 If Not tStaticStats.dwMaxConn = .dwMaxConn Then _ 
 ListView1.ListItems(4).SubItems(1) = .dwMaxConn 
 If Not tStaticStats.dwActiveOpens = .dwActiveOpens Then _ 
 ListView1.ListItems(5).SubItems(1) = .dwActiveOpens 
 If Not tStaticStats.dwPassiveOpens = .dwPassiveOpens Then _ 
 ListView1.ListItems(6).SubItems(1) = .dwPassiveOpens 
 If Not tStaticStats.dwAttemptFails = .dwAttemptFails Then _ 
 ListView1.ListItems(7).SubItems(1) = .dwAttemptFails 
 If Not tStaticStats.dwEstabResets = .dwEstabResets Then _ 
 ListView1.ListItems(8).SubItems(1) = .dwEstabResets 
 If Not tStaticStats.dwCurrEstab = .dwCurrEstab Then _ 
 ListView1.ListItems(9).SubItems(1) = .dwCurrEstab 
 If Not tStaticStats.dwInSegs = .dwInSegs Then _ 
 ListView1.ListItems(10).SubItems(1) = .dwInSegs 
 If Not tStaticStats.dwOutSegs = .dwOutSegs Then _ 
 ListView1.ListItems(11).SubItems(1) = .dwOutSegs 
 If Not tStaticStats.dwRetransSegs = .dwRetransSegs Then _ 
 ListView1.ListItems(12).SubItems(1) = .dwRetransSegs 
 If Not tStaticStats.dwInErrs = .dwInErrs Then _ 
 ListView1.ListItems(13).SubItems(1) = .dwInErrs 
 If Not tStaticStats.dwOutRsts = .dwOutRsts Then _ 
 ListView1.ListItems(14).SubItems(1) = .dwOutRsts 
 If Not tStaticStats.dwNumConns = .dwNumConns Then _ 
 ListView1.ListItems(15).SubItems(1) = .dwNumConns 
 ' 
 End With 
 ' 
 blnIsRecv = (tStats.dwInSegs > tStaticStats.dwInSegs) 
 blnIsSent = (tStats.dwOutSegs > tStaticStats.dwOutSegs) 
 ' 
 If blnIsRecv And blnIsSent Then 
 Set Image1.Picture = ImageList2.ListImages(4).Picture 
 nid.hIcon = ImageList1.ListImages(4).Picture 
 ElseIf (Not blnIsRecv) And blnIsSent Then 
 Set Image1.Picture = ImageList2.ListImages(3).Picture 
 nid.hIcon = ImageList1.ListImages(3).Picture 
 ElseIf blnIsRecv And (Not blnIsSent) Then 
 Set Image1.Picture = ImageList2.ListImages(2).Picture 
 nid.hIcon = ImageList1.ListImages(2).Picture 
 ElseIf Not (blnIsRecv And blnIsSent) Then 
 Set Image1.Picture = ImageList2.ListImages(1).Picture 
 nid.hIcon = ImageList1.ListImages(1).Picture 
 End If 
 ' 
 'Modify the system tray icon 
 ' 
 Shell_NotifyIcon NIM_MODIFY, nid 
 ' 
 tStaticStats = tStats 
 ' 
End Sub 
 
Private Sub mPopExit_Click() 
 ' 
 'called when user clicks the popup menu Exit command 
 ' 
 Unload Me 
 ' 
End Sub 
 
Private Sub mPopRestore_Click() 
 ' 
 'called when the user clicks the popup menu Restore command 
 ' 
 Me.WindowState = vbNormal 
 Result = SetForegroundWindow(Me.hwnd) 
 Me.Show 
 ' 
End Sub 
 
 
 
 
 
 
 
 
 
 
 
 
 Please, post here only feedback for the article/tutorial/sample you
 have read above.
 If you have any question and like to get an answer, post your messages in the Forum.
 
 
 
 
 
 
 
 
 
 
	 
 
 
	
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Home -
 Tools&Technologies -
 IP Helper API - How to
 retrieve TCP statistics
 
 
 
 
 
 
 
 
 
 
 
 
Home | What's
New | Tools
& Technologies | Resources | Books
 | Forum
Report about any problems and errors to webmaster@vbip.com
Copyright © 1998 - 2002 by Oleg Gdalevich
 
 
 
 
