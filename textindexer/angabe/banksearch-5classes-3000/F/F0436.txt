
VB Techniques: Linking a TreeView to a Database 
 
Home
 &#8226; 
Search
 &#8226; 
Forums
 &#8226; 
Articles
 &#8226; 
Interviews
 &#8226; 
Links
 &#8226; 
Reviews
 &#8226; 
Tip Archive
 &#8226; 
VB 6.0 Toolkit
 &#8226; 
Visual Basic 6.0 Bible
 &#8226; 
About
 
Linking a TreeView to a Database 
When it was introduced with Windows 95 and Visual Basic 4.0, the TreeView and ListView controls provided a brand new way to visualize data. Since many types of data are hierarchical in nature, a tree is a perfect way to show it. Unfortunately, the TreeView control could not populate itself automatically from a database. Because of this, you need a good way to load data into the TreeView and to be able to use that information at runtime to retrieve more information about a record. In addition, if you're using the TreeView/ListView combination, you have two controls worth of data to worry about. 
There are two things you need to make this scheme work effectively. The first is in using the Key property effectively. Each node or item in either control has a Key property. This property is designed to retrieve a particular node quickly from the entire collection. In our case, however, we'll use the Key property to retrieve data quickly from the database backing the application. 
The second key thing you need to have to make this whole thing work is to have a good data design. Every record in every table you want to show needs to have a unique ID. In most databases, these IDs will be sequences generated by the database. (AutoNumber fields in Access) The Northwind Traders database used in this example has a mix of text-based IDs and AutoNumber fields. However, both sets of IDs are unique across all the records. 
The application is shown in Figure 1. This simple window shows categories on the left, which in turn trigger data to be shown on the right. The right-hand side changes based on the content of the left-hand side. 
The first thing you need to do is to create some variables that will be used throughout the form. Add these variable declarations to the Declarations section of the form.
Option Explicit
Dim db As Database
Dim rsCategories As Recordset
Dim rsProducts As Recordset
Next, you need to retrieve the category and product records from the database. The code for the Form_Load event is shown here:
Private Sub Form_Load()
 Set db = OpenDatabase("C:\DevStudio\VB\NWind.MDB")
 Set rsCategories = _
 db.OpenRecordset("SELECT * FROM Categories " _
	 & "ORDER BY CategoryName", _
 dbOpenSnapshot)
 Set rsProducts = _
 db.OpenRecordset("SELECT * FROM Products " _
	 & "ORDER BY ProductName", _
 dbOpenSnapshot)
 
 Do While Not rsCategories.EOF
 ctlTree.Nodes.Add , _
 , _
 "Category" & rsCategories("CategoryID"), _
 rsCategories("CategoryName")
 rsCategories.MoveNext
 Loop
End Sub
This code creates two snapshots: one for the categories, and one for the products. If you add features to modify the recordsets, you should probably use dynasets instead of snapshots. However, the point of this exercise is in the code below the OpenRecordset calls. This code adds a tree node for each category in the database. The Key property is made up of two pieces: the first is the word Category, and the second is the unique ID for that category record. The makeup of the key will be important in the next chunk of code, which takes care of loading the ListView control when the user clicks a node in the tree on the left. 
Private Sub ctlTree_MouseDown(Button As Integer, _
 Shift As Integer, _
 x As Single, _
 y As Single)
 
 Dim rsFiltered As Recordset
 
 Set ctlTree.SelectedItem = ctlTree.HitTest(x, y)
 If ctlTree.SelectedItem Is Nothing Then Exit Sub
 
 rsProducts.Filter = _
 "CategoryID = " _
	 & Mid$(ctlTree.SelectedItem.Key, Len("Category") + 1)
 Set rsFiltered = rsProducts.OpenRecordset
 
 ctlList.ListItems.Clear
 Do While Not rsFiltered.EOF
 ctlList.ListItems.Add , _
 "Product" & rsFiltered("ProductID"), _
 rsFiltered("ProductName")
 rsFiltered.MoveNext
 Loop
 rsFiltered.Close
 Set rsFiltered = Nothing
 
End Sub
This event handler runs whenever the user pushes the mouse button down anywhere in the ListView control. The first few lines of code determine if the user actually clicked on an item in the list. If so, the list of products (in rsProducts) is filtered down to just the products in the category that was selected. This is where the key value of the category comes into play. To determine what tree node was selected, we simply look at the value of the key following the word "Category". That portion is actually the unique ID, which is then added to the filter used on the Products recordset. Once the filtered recordset is built, each item is added to the ListView control. The Key property of each ListItem is created in the same way as the TreeView nodes, except these use the word "Product" instead of "Category". As long as you are consistent, you can use whatever word you want. The ListItem could then be used with an editor window of some sort, since you have the unique ID of the record already available to you. 
The last code required is just some housekeeping code in several places in the form.
Private Sub Form_Resize()
 ctlTree.Height = Me.ScaleHeight - 2 * ctlTree.Top
 ctlList.Height = ctlTree.Height
 ctlList.Width = Me.ScaleWidth - ctlTree.Width - (3 * ctlTree.Left)
 
End Sub
Private Sub Form_Unload(Cancel As Integer)
 rsCategories.Close
 rsProducts.Close
 db.Close
 
 Set rsCategories = Nothing
 Set rsProducts = Nothing
 Set db = Nothing
 
End Sub
The first subroutine, Form_Resize, resizes the TreeView and ListView controls so that they fill the form both vertically and horizontally. While this version of the form does not allow you to adjust the width of the two panes, that code is easy to implement and is available many places on the web and in DejaNews (www.dejanews.com). 
Form_Unload closes and then cleans up the database objects so that no open connections are left in place. 
Written by Eric Smith on 3/1/2000
Categories
VB Techniques Articles, Forms and Controls Category
 
Copyright © 2002 by Northstar Computer Systems.
Contact the webmaster with any comments, questions or problems with the site.
 
