
 
 IOCCC Guidelines
The International Obfuscated C Code Contest
Guidelines
[ The judges |
IOCCC
home page |
How to enter |
FAQ |
IOCCC news |
People
who have won |
Winning entries ]
The 16th International Obfuscated C Code
Contest
Contest Guidelines
Be sure to also read the IOCCC
rules.
(most changes from last year are shown in
color)
This file is intended to help people who wish to submit entries to the
International Obfuscated C Code Contest.
16th International Obfuscated C Code Contest Guidelines, Hints and Comments
Copyright © Leonid A. Broukhis, Simon Cooper, Landon Curt Noll and
Peter Seebach, 2001.
All Rights Reserved. Permission for personal, education or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered. All other uses must receive prior permission in
writing from the contest judges.
ABOUT THIS FILE:
 This file is intended to help people who wish to submit entries to
 the International Obfuscated C Code Contest (IOCCC for short).
 This is not the IOCCC rules, though it does contain comments about
 them. The guidelines should be viewed as hints and suggestions.
 Entries that violate the guidelines but remain within the rules are
 allowed. Even so, you are safer if you remain within the guidelines.
 You should read the current IOCCC rules, prior to submitting entries.
 The rules are typically sent out with these guidelines.
 Changes from the 2000 rules are denoted in color.
 Not every change is marked in this file is marked, but
 most are. :-)
 WHAT'S NEW IN 2001:
 The contest runs from 01-Oct-2001 00:00 UTC to 01-Dec-2001 23:59 UTC.
HINTS AND SUGGESTIONS:
 You are encouraged to examine the winners of previous contests. See
 FOR MORE INFORMATION for details on how to get previous winners.
 Keep in mind that rules change from year to year, so some winning entries
 may not be valid entries this year. What was unique and novel one year
 might be 'old' the next year.
 An entry is usually examined in a number of ways. We typically apply
 a number of tests to an entry:
 * look at the original source
 * convert ANSI tri-graphs to ASCII
 * C pre-process the source ignoring '#include' lines
 * C pre-process the source ignoring '#define' and '#include' lines
 * run it through a C beautifier
 * examine the algorithm
 * compile it (with flags to enable all warnings)
 * execute it
 You should consider how your entry looks in each of the above tests.
 You should ask yourself if your entry remains obscure after it has been
 'cleaned up' by the C pre-processor and a C beautifier.
 Your entry need not pass all of the above tests. In certain
 cases, a test is not important. Entries that compete for the
 'strangest/most creative source layout' need not do as well as
 others in terms of their algorithm. On the other hand, given
 two such entries, we are more inclined to pick the entry that
 does something interesting when you run it.
 We try to avoid limiting creativity in our rules. As such, we leave
 the contest open for creative rule interpretation. As in real life
 programming, interpreting a requirements document or a customer request
 is important. For this reason, we often award 'worst abuse of the
 rules' to an entry that illustrates this point in an ironic way.
 We do realize that there are holes in the rules, and invite entries
 to attempt to exploit them. We will award 'worst abuse of the rules'
 and then plug the hole next year. Even so, we will attempt to use
 the smallest plug needed, if not smaller. :-)
 Check out your program and be sure that it works. We sometimes make
 the effort to debug an entry that has a slight problem, particularly
 in or near the final round. On the other hand, we have seen some
 of the best entries fall down because they didn't work.
 We tend to look down on a prime number printer, that claims that
 16 is a prime number. If you do have a bug, you are better off
 documenting it. Noting "this entry sometimes prints the 4th power
 of a prime by mistake" would save the above entry. And sometimes,
 a strange bug/feature can even help the entry! Of course, a correctly
 working entry is best.
 People who are considering to just use some complex mathematical
 function or state machine to spell out something such as "hello,
 world!" may want to try and be more creative.
 Ultra-obfuscated programs are in some cases some cases easier to
 deobfuscate than subtly-obfuscated programs. Consider using
 misleading or subtle tricks layered on top of or under an
 appropriate level of obfuscation.
 Programs that use VTxxx/ANSI sequences that are NOT limited to a
 specific terminal brand and that can also work in a standard xterm
 are considered portable.
OUR LIKES AND DISLIKES:
 Doing masses of #defines to obscure the source has become 'old'. We
 tend to 'see thru' masses of #defines due to our pre-processor tests
 that we apply. Simply abusing #defines or -Dfoo=bar won't go as far
 as a program that is more well rounded in confusion.
 Many ANSI C compilers dislike the following code, and so do we:
 #define d define
 #d foo <-- don't expect this to turn into #define foo
 When declaring local or global variables, you should declare the type:
 int this_is_ok;
 this_is_not; <-- don't use such implicit type declarations
 We suggest that you compile your entry with an ANSI C compiler. If you
 must use non-ANSI C, such as K&R C, you must avoid areas that result in
 compile/link errors for ANSI C compilers. For example, using gcc
 local function declarations, such as:
 int
 main() {
 void blah() { printf("blah\n"); }
 blah();
 }
 are not allowed even though their existence seems tailor made for
 this contest! But for now, since they are not in wide spread use
 we cannot accept entries that use them.
 If your entry uses functions that have a variable number of
 arguments, be careful. Systems implement va_list as a wide variety
 of ways. Because of this, a number of operations using va_list are
 not portable and must not be used:
 * assigning a non-va_list variable to/from a va_list variable
 * casting a non-va_list variable into/from a va_list variable
 * passing a va_list variable to a function expecting a non-va_list arg
 * passing a non-va_list variable to a function expecting a va_list arg
 * performing arithmetic on va_list variables
 * using va_list as a structure or union
 In particular, do not treat va_list variables as if they were a char **'s.
 Avoid using Use instead.
 If you use C preprocessor directives (#define, #if, #ifdef, ...),
 the leading '#' must be the first non-whitespace character on a line.
 While some broken C preprocessors do not allow whitespace before a
 '#', most do.
 The exit() function returns void. On some broken systems have exit()
 return int. Your entry should assume that exit() returns a void.
 Small programs are best when they are short, obscure and concise.
 While such programs are not as complex as other winners, they do
 serve a useful purpose. They are often the only program that people
 attempt to completely understand. For this reason, we look for
 programs that are compact, and are instructional.
 One line programs should be short one line programs, say around 80
 bytes long. Getting close to 160 bytes is a bit too long in our opinion.
 We tend to dislike programs that:
 * are very hardware specific
 * are very OS version specific
 (index/strchr differences are ok, but socket/streams specific
 code is likely not to be)
 * dump core or have compiler warnings
 (it is ok only if you warn us in the 'remark' header item)
 * won't compile or run under a POSIX P1003.1/P1003.2 like systems
 * depend on a utility or application not normally found on most
 most POSIX P1003.1/P1003.2 like systems
 * abuse the build file to get around the size limit
 * obfuscate by excessive use of ANSI tri-graphs
 * are longer than they need to be
 * are similar to previous winners
 * are identical to previous losers :-)
 * are identical to future losers (Windows XP) :-)
 Unless you are cramped for space, or unless you are entering the
 'best one liner' category, we suggest that you format your program
 in a more creative way than simply forming excessively long lines.
 The build file should not be used to try and get around the size
 limit. It is one thing to make use of a several -D's to help out,
 but it is quite another to use 200+ bytes of -D's in order to
 try and squeeze the source under the size limit. You should feel
 free to make use of the build file space, but you are better off
 if you show some amount of restraint.
 You should try to restrict commands used on the build file to
 POSIX-like or common Un*x-like commands. You can also compile
 and use your own programs. If you do, try to build and execute
 from the current directory. This restriction is not a hard and
 absolute one. The intent is to ensure that the building if your
 program is reasonably portable.
 Don't forget that the building of your program should be done
 ***without human intervention***. So don't do:
 cat > prog.c
 cc prog.c -o prog
 However, you can do something cute such as making your program
 do something dumb (or cute) when build 'automatically'. However
 when it is run with a human involved, do something more cleaver.
 For example, one could use the build instructions:
 cc prog.c -DNONHUMAN -o prog
 echo "See remarks section about alternate ways to compile"
 and then include special notes in the ---remarks--- section for
 alternate / human intervention based building.
 We want to get away from source that is simply a compact blob of
 characters. To help, we give a break to source that contains
 whitespace, and in certain cases ; { or } characters. While the
 number of characters excluding whitespace (tab, space, newline),
 and excluding any ; { or } followed immediately by either whitespace
 or end of file, must be "P@:7,A"@H)"2TM(&-H;VYG;R`Q.3"!P2!D96-O9&5D('1H:7,@9FEL92X@(%-E96US('1H
M97)E(&ES(&$*2!D;VXG="!Y;W4@=&5L;"!U6]U(&1E8V]D
M960@=&AI&%M6]U(&1O('-E;F0@:7,@82!B971T97(@97AA;7!L92!F:6QE
M+"!B92!W87)N960@+BXN"G1H870@:70@8V%N;F]T(&)E(&-O;G-I9&5R960@
M87,@82!C;VYT97-T(&5N=')Y+B`@4V\@>6]U(&UI9VAT(&YO=`IW86YT('1O
M('-E;F0@:6X@>6]U"F]T:&5R(&AA;F0@+BXN('EO=2!M:6=H="!W
M86YT('1O('-E;F0@=7,@>6]U"!CGIB:6XA"@``
`
end
---build---
begin 664 build
M9V-C("UA;G-I('!R;V"`@("\J"B`@("`@*B!.;W0@=F5R>2!O8F9U"H@82!P;&%C96AO;&1E&%M"B`@("!P"!P"!P6]U" command.
 It is also ok to use a "gcc" command (and gcc args). However keep
 in mind that your entry should be compilable by any standard ANSI C
 compiler and thus should not depend on a special gcc feature.
 If your entry needs special info files, you should uuencode them
 into ---info--- sections. In the case of multiple info files,
 use multiple ---info--- sections. If no info files are needed,
 then skip the ---info--- section.
 Info files are intended to be input, or detailed information that
 does not fit well into the ---remark--- section. For example, an
 entry that implements a compiler might want to provide some sample
 programs for the user to compile. An entry might want to include a
 lengthy design document, that might not be appropriate for a
 'hints' file.
 Info files should be used only to supplement your entry. For
 example, info files may provide sample input or detailed
 information about your entry. Because they are supplemental,
 the entry should not require them exist.
 In some cases, your info files might be renamed to avoid name
 conflicts. If info files should not be renamed for some reason,
 say so in the ---remark--- section.
 Info files must uudecode into the current directory. If they
 absolutely must be renamed, or moved into a sub-directory, say
 so in the ---remark--- section.
 When submitting multiple entries, be sure that each entry has
 a unique entry number from 0 to 7. Your first entry should
 have entry number 0.
 With the exception of the header, all text outside of the entry
 format may be ignored. That is, don't place text outside of the
 entry and expect us to see it. (Our decoding tools are not AI
 progs!) If you need tell the judges something, put it in the
 ---remark--- section, or send a EMail to:
 questions@ioccc.org (not the address for submitting entries)
 You must include the words ``ioccc question''	in the subject of your
 EMail message when sending EMail to the judges.
 The date should be given with respect to UTC. (Some systems refer
 to this as GMT or GMT0) The format of the date should be that as
 returned by asctime() in the C locale. An example of such a string is:
 Wed Feb 2 00:47:00 2001
 This format is similar to the output of the date(1) command. The
 string does not include the timezone name before the year. On many
 systems, one of the following command will produce a similar string:
 date -u "+%a %h %d %T 20%y"
 date -u sed -e 's/... \(20[0-9][0-9]\)$/\1/'
 sh -c 'TZ=UTC date sed -e "s/... \(20[0-9][0-9]\)$/\1/"'
 sh -c 'TZ=GMT date sed -e "s/... \(20[0-9][0-9]\)$/\1/"'
 sh -c 'TZ=GMT0 date sed -e "s/... \(20[0-9][0-9]\)$/\1/"'
 You are allowed to update/fix/revise your entry. To do so, set
 the 'fix' line in the ---entry--- section to 'y' instead of 'n'.
 Be sure that the resubmission uses the same title and entry number
 as well, as these are used to determine which entry is to be
 replaced.
 Again, you may want to use the mkentry program may be found at:
 http://www.ioccc.org/official/mkentry.c
 to format your entry.
JUDGING PROCESS:
 Entries are judged by Leonid A. Broukhis, Simon Cooper, Landon Curt Noll
 and Peter Seebach.
 Entries are unpacked into individual directories. The EMail message
 is unpacked into individual files, each containing:
 ---entry--- section
 all ---author--- sections
 all ---info--- sections
 ---build--- section
 ---program--- section
 any other text, including the EMail message headers
 Prior to judging, the 'any other text' file is scanned to be sure
 it does not contain useful information (or in case the entry was
 malformed and did not unpack correctly). Information from the
 ---author--- sections and the title from the ---entry--- section
 are not read until the judging process is complete, and then only
 from entries that have won an award.
 The above process helps keep us biased for/against any one particular
 individual. We are usually kept in the dark as much as you are
 until the final awards are given. We like the surprise of finding
 out in the end, who won and where they were from.
 We attempt to keep all entries anonymous, unless they win an award.
 Because the main 'prize' of winning is being announced, we make all
 attempts to send non-winners into oblivion. We remove all non-winning
 files, and shred all related paper. By tradition, we do not even
 reveal the number of entries that we received. (For the curious,
 we do indicate the volume of paper consumed when presenting the IOCCC
 winners at talks)
 After the initial announcement, we attempt to send EMail to the
 authors of the winning entries. One reason we do this is to give
 the authors a chance to comment on the way we have presented their
 entry. They are given the chance to correct mistakes and typos. We
 often accept their suggestions/comments about our remarks as well.
 This is done prior to posting the winners to the wide world.
 Judging consists of a number of elimination rounds. During a round,
 the collection of entries are divided into two roughly equal piles;
 the pile that advances on to the next round, and the pile that does
 not. We also re-examine the entries that were eliminated in the
 previous round. Thus, an entry gets at least two readings.
 A reading consists of a number of actions:
 * reading the ---entry--- section
 * reading the uudecoded ---build--- section
 * reading the uudecoded ---program--- section
 * reading the uudecoded ---info--- section(s), if any
 * passing the source thru the C pre-processor
 skipping over any #include files
 * performing a number of C beautify/cleanup edits on the source
 * passing the beautified source thru the C pre-processor
 skipping over any #include files
 In later rounds, other actions are performed:
 * compiling/building the source
 * running the program
 * performing miscellaneous tests on the source and binary
 Until we reduce the stack of entries down to about 25 entries, entries
 are judged on an individual basis. An entry is set aside because it
 does not, in our opinion, meet the standard established by the round.
 When the number of entries thins to about 25 entries, we begin to form
 award categories. Entries begin to compete with each other for awards.
 An entry often will compete in several categories.
 The actual award category list will vary depending on the types of entries
 we receive. A typical category list might be:
 * best small one line program
 * best small program
 * strangest/most creative source layout
 * most useful obfuscated program
 * best game that is obfuscated
 * most creatively obfuscated program
 * most deceptive C code
 * best X client (see OUR LIKES AND DISLIKES)
 * best abuse of ANSI C
 * worst abuse of the rules
 * (anything else so strange that it deserves an award)
 We do not limit ourselves to this list. For example, a few entries are so
 good/bad that they are declared winners at the start of the final round.
 We will invent awards categories for them, if necessary.
 In the final round process, we perform the difficult tasks of
 reducing the remaining entries (typically about 25) down to 8 or 10
 winners. Often we are confident that the entries that make it into
 the final round are definitely better than the ones that do not
 make it. The selection of the winners out of the final round, is
 less clear cut.
 Sometimes a final round entry os good enough to win, but is beat out
 by a similar, but slightly better entry. For this reason, it is
 sometimes worthwhile to re-enter an improved version of an entry
 that failed to win in a previous year. This assumes, of course,
 that the entry is worth improving in the first place!
 More often than not, we select a small entry (usually one line), a
 strange/creative layout entry, and an entry that abuses the contest
 rules in some way.
 In the end, we traditionally pick one entry as 'best'. Sometimes such
 an entry simply far exceeds any of the other entries. More often, the
 'best' is picked because it does well in a number of categories.
ANNOUNCEMENT OF WINNERS:
 In Jan or Feb 2002 the judges will post an initial announcement of who
 won, the name of their award, and a very brief description of the
 winning entry on the IOCCC web site:
 http://www.ioccc.org/whowon.html
 We will also submit a brief announcement story to /.:
 http://www.slashdot.org
 that, depending on the willingness of the /. editors, may be posted
 to their site at the same time.
 Note that initial announcement will NOT contain source. This is because
 the winning authors are given a chance to review the judges comments,
 and test our Makefile. This review process typically takes a few weeks.
 Sometime after the initial announcement, and once the the review by
 the winners has been completed (perhaps Feb or Mar 2002), the winning
 source will be posted to the IOCCC web site:
 http://www.ioccc.org/years.html
 NOTE: previous winners are available at that URL
 We will submit a story annoucing the availability of the winners
 to /. at the same time.
 Finally (again perhaps Feb or Mar 2002) the winning entries will be
 posted to the following groups:
 comp.lang.c comp.lang.c.moderated alt.sources
 In addition, pointers to these postings are posted to the following
 comp.sources.misc comp.windows.x comp.programming
 misc.misc comp.std.c alt.folklore.computers
 Often, winning entries are published in selected magazines from around
 the world. Winners have appeared in books ("The New Hackers Dictionary")
 and on T-Shirts.
 Last, but not least, winners receive international fame and flames! :-)
FOR MORE INFORMATION:
 You may contact the judges by sending EMail to the following address:
 questions@ioccc.org (not the address for submitting entries)
 You must include the words ``ioccc question'' in the subject of your
 EMail message when sending EMail to the judges.
 Questions and comments about the contest are welcome. Comments about
 confusing rules and guidelines are also welcome.
 The rules and the guidelines may (and often do) change from year to
 year. You should be sure you have the current rules and guidelines
 prior to submitting entries.
 Check out the IOCCC Web page:
 http://www.ioccc.org
 It has rules, guidelines and winners of previous contests (1984 to date).
Leonid A. Broukhis
Simon Cooper
chongo (Landon Curt Noll) /\cc/\
Peter Seebach
And now for the fine print:-)
Some of the changes from the 2000 rules have been denoted
by color. All decisions of the judges
are their
own decisions. This contest is NULL and void* where prohibitied
by brain damaged compilers. The judges and
winners are not responsible for the laws of physics,
the compositeness of 2^11-1, eye strain or the corruption
of the programming of the impressionable. (still reading
this are you?) Ok, if you read this far I guess we can
get to the real reason for this disclaimer ...
This page is an attempt to render the guidelines into
HTML. While we tried to make this page reflect the guidelines, we
may have made some mistakes. For this reason, this page
is not the official rule set. And the same reason, the
rules page is not the
official rules set.
When in doubt, consult the official
rules
and consult the official
guidelines .
See also the official
mkentry.c program.
Now serving 
Credits:
Authored by:
chongo
 /\oo/\
Copyright © Landon Curt Noll, Simon Cooper, Peter
Seebach and Leonid A. Broukhis, 2002.
All Rights Reserved.
Permission for personal, education or non-profit use
is granted provided this copyright and notice are included in its entirety
and remains unaltered. All other uses must receive prior permission in
writing from the contest judges.
