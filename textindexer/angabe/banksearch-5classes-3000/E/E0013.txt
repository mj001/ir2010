
Reviewer's Guide
	 
 
 
 
 
	
	
 
	
 
	
	
	 
	 
	
	 All Products |
	 Support |
	 Search |
	 microsoft.com Guide 
	
	
	 
	 
	
	
	
	
	
	 Visual C++ Home |
	
	
	 
	
	
	
 
 
	
	 
	
	
 
 
 
 
 
 
	
	
	
	
	
	
	
	
	
	
	 
	
	
	<![if ! ie ]>
	Search This Site
	
	
	
	
	
	
	<![endif]>
	 
	
	 	
	
	
	 
	 
	
	
	
	
	
	 
	Advanced Search 
	
	
	 
	
	
	
	
	 
	 
	
	
	
	 
	 
	 
	
	
	
	
	
	Visual Studio Home 
	
	
	
	
	
	
	Visual C++ Home 
	
	
	
	
	
	
	Product Information 
	
	
	
	
	
	
	How to Buy 
	
	
	
	
	
	
	Technical Resources 
	
	
	
	
	
	
	Downloads 
	
	
	
	
	
	
	Support 
	
	
	
	
	
	
	Community 
	
	
	
	
	 
	
	
	
	
	
	
	Developer Tools 
	
	
	
	
	 
	
	 
	
	
	
	
	 
	 
 
	
 
 
 
 
 
	
 
 
 
	 
	 	Visual C++ .NET Product Information
	
	 > Visual C++ 5.0
	
	 
	 	
	 	
	 	 
	 	
	 	
	 	
Reviewer's Guide
 
	 	
	 	
	 	
 
	 	
	 	
	 	 
	 	
	 	
	 	 
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	 
	 	
	 	
	 	 	 
	 	
	 	
	 	 
	 	
	 	
	 	 	
	 	
	 	
	 	 
	 	
	 
	 
	 	
	 	 
	 	
	 
 
 
 	 
	 	 	 
 
 
 
 
 
	
	
	
	
	
	
	On this page 
 
	
	
	
	 
	
	
	
 	
	
	
	
	
	 
	Criteria for Evaluating C++ Development Tools 
	
	
	 
	 
	
	
	
	
	 
	Microsoft Visual C++ Version 5.0 Description and Features 
	
	
	 
	 
	
	
	
	
	 
	Microsoft Visual C++ for Windows® CE reviewers guide 
	
	
	 
	 
	
	
	 
	
	
	
	
 
 
 
 
 
 
 
	
Welcome to the Microsoft Visual C++® version 5.0 reviewers guide.
Microsoft Visual C++ version 5.0 is the newest version of Microsoft Visual C++, an advanced programming environment for object-oriented application development. Visual C++ version 5.0 includes new features designed to improve programmer productivity not only in C++ applications, but also in Internet, intranet, and mixed-language systems with Microsoft Visual J++&#8482; or Microsoft Visual Basic®.
Use this guide to evaluate Visual C++ version 5.0. It highlights product features, and it details the criteria for evaluating C++ development tools.
Criteria for Evaluating C++ Development Tools
Because the C++ development tool category is changing, this section of the reviewers guide will aid the evaluation process by providing information based on up-to-date C++ customer research. It defines the C++ development tool category and provides criteria for evaluating tools that meet the definition of a traditional C++ development tool.
Defining the C++ Development Tool Category
There are three classes of C++ development tools.
- Traditional C++ development tools. Traditional C++ development tools focus on generating high-performance applications and components, C++ language compliance and portability, general solutions, and interactive development environments. These C++ tools excel at supporting low-level API access, operating systems, debugging, direct access, legacy code, and the Microsoft Foundation Classes (MFC). One succinct statement that is particularly true is that "…in the hands of a professional programmer, Visual C++ will take you further than any [general or RAD] tool…."
- Rapid application design (RAD) tools. C++ RAD tools include Powersoft Optima++, Borland C++ Builder, and add-ons to general C++ compilers such as Viewsoft and Blue Sky Visual SQL. Their emphasis is RAD-like ease of use. They are not necessarily backward compatible with existing code, MFC projects, or portability of forms.
- Component deployment tools. Component deployment tools enable component distribution over Internet or multi-tier architectures. While these tools, such as Forte and Bluestone Sapphire/Web, may generate C++ code, their focus is on providing administration and management; they are not intended to be general-purpose application-building tools.
Evaluating C++ Development Tools
Microsoft customer research reveals that of the three classes of C++ development tools, only the first—traditional C++ development tools—meets the criteria for a tool that is comprehensive and complete. Developers view these criteria with the weighting shown in the table below. The criteria in the table are discussed further in the sections following the table.
	Criterion 
	Percentage of Total Score 
	Benchmark and Performance 
	30% 
	General Solutions, including Internet, Client/Server, Systems 
	25% 
	Language Compliance and Features 
	5% 
	Integrated Development Environment 
	20% 
	Comprehensive Support 
	20% 
	Total Score 
	100% 
Benchmark and performance
When evaluating a C++ tool, it is easy to benchmark compilers for a simple, quantifiable result. Microsoft customer research shows that executable code performance is the most important issue for most developers using the C++ language. While this is primary and critical, several secondary criteria should be taken into account when evaluating a C++ compiler’s performance. The list below details these criteria:
- Optimized program speed and size. Speed and size of executable files remain the primary performance criteria and are quantified by standard benchmarks. Research shows that 65% of independent software vendor (ISV) software is written with C++. These developers require performance and can’t afford late life cycle ports to higher performing compilers to meet performance requirements. Note that size is often proportional to speed, because of run-time footprint size or secondary memory working sets.
- High performance library. Fully thread-safe libraries allow reentrancy and multithreading. Template libraries can be used to generate small components often under 10K, with no run-time DLLs, for the smallest Internet downloads. The granularity of free threading and thread pooling of small components greatly improve transaction server and Internet server performance. Library support for I/O buffering, asynchronous I/O, and memory mapping improves intensive data access twofold. 
- Newest processor-specific optimizations. Hardware processing can be maximized only with the newest processor extensions such as for the newly released Intel MMX and Pentium Pro processors.
- Linker optimizations. Function-level linking to eliminate unused code in the module. 
- C++ specific optimizations. C++-specific source optimizations, including optimized inlining, exception-handling optimizations, template folding, and others.
- Quick data access. Access to a variety of data sources through abstraction layers such as ODBC, ADO, and OLEDB. Thread-safety and reentrancy are becoming important issues in data access as applications scale up or are ported to Internet servers.
- Fast build system. Optimized compile and link speed using precompiled header files, function-level incremental compilation, minimal rebuild, and faster linker throughput.
General solutions
"C++ is a general purpose programming language; its core application domain is systems programming in the largest sense." Traditional C++ development tools have uniquely delivered a wide range of system solutions and should be evaluated on how well they enable the development of large systems. Software Development Kits (SDK) and Device Driver Kits (DDK) should be available for each of the following areas.
Platform support
- Native Component Object Model (COM) support in the compiler, consistent with ActiveX&#8482; core technologies.
- Template wizards, samples, and code galleries to help build the smallest, fastest components.
- Wizards for creating COM objects and ActiveX&#8482; Controls and Components.
- COM editor for generating and maintaining COM objects.
- System-level programming for embedding assembly code, components, and DLLs.
- Platform support for the Microsoft Windows® 95 and Microsoft Windows NT® operating systems.
- Multiple threading and synchronization features. Libraries included should be thread safe.
Client/Server support
- Client/Server framework, such as Microsoft Foundation Classes (MFC), enables database development classes or components to encapsulate database connectivity, transactions, and thread safety.
- Strong component-creation support for complementing distributed objects.
- Cross-platform support, allowing codebases to be ported across different computing architectures. This enables code reuse in a heterogeneous computing environment and affords new opportunities for software ISVs.
- SQL editing and debugging, including remote, three-tier debugging.
- Database life cycle tools for visual design, editing, and connectivity.
- Legacy maintenance tools to ease integrating with existing mainframes and networks.
- Database library, wizards, and samples to generate or use pre-tested code.
Internet support
- Internet classes that support HTTP, FTP, gopher, Internet Server API (ISAPI), and ActiveX technologies.
- Active Template Library (ATL) for creating small components that download quickly even over slow connections.
- Internet wizards to extend or filter Web servers.
Large scale support
- Extensions to support transaction servers and transaction standards.
- Source-code control, team development tools, and interfaces to include other vendors’ source-code-control tools.
- Mixed-language productivity with integration, debugging, and component scripting.
Language compliance and features
Traditional C++ development tools are based on a standard language that is open, flexible, and highly portable. It is the primary language used to access the complete features of multiple platforms.
The International Standard Organization (ISO) defines C and will soon adopt C++, which is currently in a draft working paper for potential acceptance by their American member, American National Standards Institute (ANSI). Important issues surrounding language conformance are:
- C++ test suite conformance. Microsoft uses the Plum-Hall Test Suite for C++. Plum-Hall is one of the leading independent vendors of language-verification test suites. 
- ISO C certification. The C compiler component included in Visual C++ has been certified by NIST, the National Institute for Standards and Technology, as conforming to the Federal IPS (FIPS) 160 publication for approving government contracts to use ANSI/ISO C on certified platforms.
- C/C++ feature compliance. Compilers should fully support the newest language features, including namespaces, C++ exception handling, templates, Run Time Type Identification (RTTI), the C++ Standard Library, and the Standard Template Library. All keywords and types, including bool, explicit, false, mutable, true, and typename, should be supported.
- Third-party libraries. C++ development tools should include tested third-party libraries, such as P.J. Plauger’s C++ Standard Library and the Standard Template Library.
- C++-specific error messages. C++ development tools should increase the quality of error reporting with strict levels of error detection. Compiler front-end extensions are helpful to report errors that are more specific.
- Portability levels. A C++ development tool should enable portability by providing strict portability switches that report non-standard extensions.
Integrated development environment
An integrated development environment (IDE) is a critical requirement for a traditional C++ development tool, since it plays such a fundamental role in increasing developer productivity. Research indicates that 85% of developers who build applications for the Web find the lack of a robust, integrated development environment to be the primary productivity barrier to building Web applications. An IDE brings together all of the tools and libraries required to design, develop, debug, and profile a C++ application within a single workspace. Specifically, a C++ development environment should include these features:
- Visual integrated development environment. Developers want a visual environment so they can more rapidly build applications by integrating the variety of tools required to design, develop, debug, and profile a general application.
- Integrated database development support. Zona Research reports that the majority of corporate Web applications will have a database component. It is critical to integrate database features, including schema design, table editing, remote debugging, trigger and stored-procedure editing and debugging, and data viewing, into the IDE. Using it, developers can create C++ components for the enterprise, the intranet, or the Internet without switching to a different development environment.
- Debuggers. Developers need tools that offer remote and server-side debugging. They must also offer .dll or .exe browsing, process-monitoring tools, and message spy utilities. 
- Macro scripting. High-level scripting languages, such as Visual Basic, Scripting Edition (VBScript) and the Microsoft Visual J++ implementation of JavaScript, named JScript, automate routine tasks, such as duplicating routine profile scripts to test the performance of the current build or re-initiating complex, multi-file debug sessions. An interface should be provided to allow plugging in scripting languages from third-party software vendors.
- Multi-user, team development support. Research shows that the majority of corporate Internet and intranet sites are created by teams. Thus, a Web development environment where C++ is used must handle source-code control and support multiple users working on the same project at the same time.
- Wizards or code generators. Developers expect wizards for project creation, class creation and maintenance, COM component creation and maintenance, and product installation.
- Project system. An industrial-strength development environment must support the creation of projects that allow for easy access to all of the files making up the C++ application. This system must support subprojects, and the subprojects must be separable so individual team members can work on a subproject, then integrate the resultant code into a full system-wide build. A project system makes it easier for developers to track and manage applications over time.
- Profilers. Code performance, as stated earlier, is one of the primary considerations for the C++ developer. It is natural, then, that a code-tuning tool such as a profiler be a requisite member of a C++ development suite. 
- Text editor. Productivity-enhancing programmer’s editors need to support drag and drop of text into the editor. Additionally, syntax color highlighting for C++, HTML, SQL, and other languages is extremely helpful in the early detection of typographical errors.
- Resource editor. The resource editor must support the common resources such as dialog boxes, bitmaps, menus, and so on. It must also support image formats such as .gif and .jpeg.
- Extensibility of IDE. The development environment should support integration with other tools and languages or with third-party tools.
- Integrated Help system, reference materials, and samples. The development environment should help developers get started quickly and find answers to common questions without leaving the IDE. It should also integrate with the new wealth of information available on the World Wide Web.
Comprehensive support
The core backbone systems, or infrastructures, for corporations are often developed in C++. These mission-critical projects are extremely sensitive to delays. They require a worldwide support network that provides 24-hour access, and multiple language support.
- Worldwide consulting services. Worldwide network of certified solution services by third-party consultants who have starting blueprints of solution frameworks.
- Worldwide support services. Local access for basic technical support by telephone and fax, and other services such as BBS and sales telephone numbers.
- Product Web site. Web and FTP sites with the latest C++ product technology, support, current FAQs, white papers, samples, and case studies.
- Partner Web sites and online services. Multiple online services and partner Web sites provide customer newsgroups, FAQs, software libraries, and technical information for both the product and related software vendors and component partners.
- Third-party software. Wealth of third-party tools, products, and components specifically designed for compatibility.
- CD toolkits. Regular CD updates of Software Development Kits (SDK), Device Driver Kits (DDK), resource kits, online books, samples, and patches, for a networked community of developers.
- Free technical information. Variety of no-charge methods for delivery of technical information, including modem download services, e-mail notification subscriptions, fax back services, and automated telephone service, for quick answers to common technical questions.
- Training and certification. Third-party training and a statistically valid C++ product certification process.
- Targeted support and training. Targeted, priority support for academic, trainer, and worldwide customers. Text telephone (TT/TDD) services for accessibility by developers who require text telephone services.
- Third-party publishing. Third-party authoring of product and product library-related books, magazines, training courses, consulting, and events.
- Comprehensive documentation. Completely searchable HTML-tagged documentation system included with the product, with real-time updates available on the Web and with both conventional reference and task-based material, a comprehensive index, and full-text searching.
- Professional conferences. Product-specific events to build up user communities and talk directly with the product developers, trainers, and staff.
Summary of Criteria
The primary developer criteria in selecting C++ development tools are:
- Supports open standards such as ISO and ANSI. 
- Supports a variety of development methodologies. These include mixed-language application development, a comprehensive support network, and a development environment that integrates traditional, client/server, and Internet technologies.
- Supports scalability from single-user client architectures up to multi-tier client/server with distributed object models and high-performance database back-ends.
	
	
	 
	
	
Microsoft Visual C++ Version 5.0 Description and Features
This section of the reviewers guide describes the product and it features, including the place Visual C++ takes in the Visual Tools family and its design goals. The additional capabilities of the Enterprise Edition are highlighted at the end of this section. For a list of product features, see the table in the section "Microsoft Visual C++ Version 5.0 Features Summary." The table provides a side-by-side comparison of the Visual C++ Professional and Enterprise Editions.
The Microsoft Visual Tools Family
Microsoft Visual C++ is a member of the Microsoft Visual Tools family, which also includes Visual Basic, Visual InterDev&#8482;, and Visual J++. Developers can use the Visual Tools family, available as Microsoft Visual Studio 97&#8482;, for a wide range of applications. The design goals that drove this release support the criteria mentioned earlier in "Summary of Criteria": scalability, openness, and comprehensiveness. Support for these initiatives can be seen throughout Microsoft Visual Studio 97.
Visual C++ version 5.0 complements the Visual Tools family with:
- Integrated development environment (IDE), redesigned and standardized for improved consistency across hosted applications.
- Native compiler support for the Component Object Model (COM), Visual COM Editing, and a COM Wizard that generates Active Template Library (ATL) code for accelerated development of lean, fast components.
- Enterprise data modeling, transactions, remote SQL debugging, and team development.
- Optimizing compiler that significantly reduces target code size, increasing speed. Results vary, but have been reported at a roughly 10% improvement over Visual C++ 4.2 simply by recompiling.
- Improved conformance to the current C++ ANSI/ISO Working Paper.
Design Goals for Microsoft Visual C++
In Visual C++ version 5.0, Microsoft has responded to many customer requests for features that solve a general class of problems, including:
- Industry leading performance. Developers require that their compilers deliver extremely high-performance optimized code. The Visual C++ 5.0 compiler’s optimizer has been improved to generate code that is improved in both size and speed over previous versions of Visual C++.
- Tools for building three-tier applications. Enterprise developers need different tools so they can work on an entire application—client, middle tier, and server—as a single entity. This means designing, developing, and debugging applications, components, transactions, or databases using one tool. Developers can develop locally and deploy remotely using the Enterprise Edition.
- Cross-tool integration. More and more, developers are implementing cross-tool solutions, be they Visual C++ back-end and Java front-end applications for the Internet, or Visual Basic clients and Visual C++ servers in a traditional client/server architecture.
- Tools to Internet-enable applications. Corporate developers need tools to add support for HTTP, FTP, gopher, Internet Server API (ISAPI), and ActiveX to any client, including developing the smallest ActiveX Controls and Components. 
- MFC&T, the newest version of the industry-standard class library. With Visual C++ version 5.0 comes the introduction of the Microsoft Foundation Classes and Templates (MFC&T) version 5.0. This new class library represents the merging of MFC version 4.21 and the Active Template Library version 2.1 to form a complete class library with facilities both for creating world-class applications based on Windows and lightning-fast, extremely compact components for optimal performance in Internet browser downloads and Transaction Server controls.
- Extensive COM support. Developers require the ability to deploy component-based solutions, over the Internet, for reusable ActiveX Controls, and for scalable client/server architectures that use distributed components. To enable these technologies, Visual C++ 5.0 provides native Component Object Model (COM) support in the compiler, COM editing and browsing in the development environment, and COM wizards to accelerate development of COM objects. 
- Extensive documentation. Professional developers need tutorials and samples to learn quickly and to improve productivity, as well as extensive documentation, Help, online books, and the complete Microsoft Developer Network (MSDN) Library.
Microsoft Visual C++ Version 5.0 Feature Summary
	Feature Area 
	Microsoft Visual C++ Professional Edition 
	Microsoft Visual C++ Enterprise Edition 
	ANSI/ISO C++ Compiler 
	Significant efficiency improvements for generated code. 
	ue 
	ue 
	Current conformity with Working Paper, including namespaces, mutable, explicit, and bool. 
	ue 
	ue 
	Libraries 
	Microsoft Foundation Classes and Templates. 
	ue 
	ue 
	C++ Standard Library. 
	ue 
	ue 
	C/C++ Run-time Library. 
	ue 
	ue 
	Internet Support 
	ActiveX, WinInet (HTTP, FTP, gopher), Winsock support for ActiveX Controls and Internet-enabled applications. 
	ue 
	ue 
	Internet Server API Extension and Filter creation support. 
	ue 
	ue 
	Microsoft Internet Explorer, with just in time (JIT) Java Compiler. 
	ue 
	ue 
	HTML editing. 
	ue 
	ue 
	Enterprise 
	Remote T-SQL debugging. 
	 
	ue 
	SQL editing. 
	 
	ue 
	Visual schema design and table editing. 
	 
	ue 
	Data View pane in Project Workspace. 
	 
	ue 
	Developer Tools 
	Code samples and technical information from the Microsoft Developer Network. 
	ue 
	ue 
	InstallShield5 Free Edition enhanced Setup Wizard for creating custom setups. 
	ue 
	ue 
	Windows 95 Help Compiler. 
	ue 
	ue 
	Microsoft Transaction Server. 
	 
	ue 
	Microsoft SQL Server. 
	 
	ue 
	Microsoft Visual SourceSafe, Version Control System. 
	 
	ue 
Improved Development Environment and Cross-tool Integration
Visual C++ is now part of Microsoft Visual Studio 97. This is in response to requests from developers who said they need a suite of seamlessly integrated tools to be productive in their jobs. To achieve this integration, Visual C++ 5.0 adds Visual COM Editing, Visual Basic Scripting, an improved debugger and build system, HTML editing, enhanced workspace capabilities, comprehensive documentation, and command bars.
Developer Studio integration
Using Visual C++, a programmer can develop C++ code while using other tools in the same environment. Version control with popular version-control systems such as PVCS and Visual SourceSafe can be added and integrated tightly. The Microsoft Developer Network Library CD can be integrated directly into product documentation. 
Integration into the same environment with Visual J++ and Visual InterDev means that a developer can work on multiple projects in the same workspace using different languages for each. This is useful for programs where the client is coded in C++ and the server is coded in a different language. It’s also useful when the development project is made up of two programs that communicate through COM interfaces. 
You can read more about Visual J++ and Visual InterDev, on the Web sites at msdn.microsoft.com/visualj/ and msdn.microsoft.com/vinterdev/.
Visual COM support
Creating COM components and ActiveX Controls has become extremely important to developers who use Visual C++. To make this easier, Microsoft has taken several steps:
- There is a new visual feature in the ClassView window, so a developer can not only add member variables and functions, but also add properties and methods for classes that are COM-enabled.
- The Visual C++ version 5.0 compiler implements C++ language extensions that support COM. These extensions make accessing COM objects (from a client standpoint) just as natural as it is when using Visual Basic. Methods visually are used as member functions and properties as member variables.
- Using the ATL COM Wizard, a developer can start a project that will implement COM components in ATL. This feature works together with the ATL Object Wizard and Visual COM Editing in much the same way the MFC AppWizard works together with ClassWizard.
- Using the ATL Object Wizard, COM objects can be added to a project begun with the ATL COM Wizard. These objects run the gamut from ActiveX Controls to simple objects—UI-less servers. Of particular note is the MTS Server object, which helps create a COM object that is compliant with the Microsoft Transaction Server programming model.
Scriptable macros with Visual Basic Scripting
A common request Microsoft receives for improvement to Visual C++ is for inclusion of a macro language. Although many partial solutions were suggested, until a general one presented itself—one that would work for a large portion of the Visual C++ customer base—the Visual C++ development team was reluctant to implement one. Automation kept resurfacing as a solution. 
Now, in Visual C++ version 5.0, much of the Visual C++ development environment’s functionality is exposed in a carefully thought-out object model similar to the model available in Microsoft® Office products. Developers who have used Visual Basic, Applications Edition (VBA) for automating Microsoft Office will immediately be comfortable with the Visual Basic Scripting methods, properties, and events exposed by the Developer Studio IDE.
Visual Basic Scripting is not the only way to automate the environment; a developer can use any tool capable of creating an Automation or COM server for this purpose. You can read more about Visual Basic Scripting on the Web site at www.microsoft.com/vbscript/.
Industry leading debugger
The Visual C++ debugger has advanced features for integrated debugging of C++, SQL, and COM code, including automation of repetitive debugging tasks. Some features are:
- Advanced "locals" windows that shows locals or objects on the local frame. "Auto" shows objects currently in context, be they local or global, and "This" shows the members of the class of which the currently debugged function is a member.
- Multiple Watch windows. The Watch window in Visual C++ is tabbed, so a developer can set up many contexts, none of them too cluttered to view all the expressions of interest. This can be handy when debugging across functions or when focusing on more than one area of code.
- Full process and thread support. A developer can now attach the debugger to a running process.
- DataTips&#8482;, which display the value of an expression when the cursor is passed over it. 
- SQL debugging, available in the Enterprise Edition, for remote debugging of SQL-stored procedures.
- The debugger can be completely automated using Visual Basic Script. Using this technique, a developer can record and play back complex scripts and create involved test and debug scenarios that can be used later for regression testing.
Improved project/build system
The project/build system in previous versions of Visual C++ had certain limitations related to load time and subprojects. To remedy these, Visual C++ 5.0 uses a binary-format project file, with the extension .dsw, which loads and saves in a fraction of the time taken to save the old text-file representations. Naturally, the upgrade from the Visual C++ 4.x format is seamless, as backward compatibility is emphasized. To address subprojects, subprojects were made separable, which accomplishes two goals:
- It is possible to load a subproject without loading all the other projects. The monolithic workspace file is gone.
- A developer or group of developers can work on a subproject without working on the main project. This facilitates team development.
In addition to using the scripting interface, Visual C++ version 5.0 offers a unique new set of interfaces for extensibility named Add-In interfaces. To create an Add-In, a developer simply uses the Add-In Wizard to generate the skeleton code, and then adds functionality. Alternatively, the ATL Object Wizard can be used to create a Developer Studio Add-In Component.
HTML editing
HTML can be created and edited in a project, then previewed within the development environment as it will appear in the browser. An HTML editor, with complete syntax coloring, is integrated with the Developer Studio IDE. For more sophisticated Internet development, including support for server-side scripting, developers can use Visual InterDev, another member of Microsoft Visual Studio 97.
Visual multiple views with Project Workspace
ClassView, Resource View, Data View, File View, and Info View—all available in the Microsoft Visual C++ Workspace Window—offer a developer many different views into a project. By using these views, a developer can focus on the element of the project that needs work. The Workspace Window is an excellent way to navigate inside a project.
Open Help documentation with HTML
Books Online, made popular in earlier versions of Visual C++, just got better. The documentation is now HTML-based and integrates seamlessly with the Internet as it can be updated incrementally by adding information available over the World Wide Web. The Visual C++ documentation can also be integrated in a more complete way with other online documentation pertaining to SDKs and third-party vendors’ software.
The Visual C++ documentation is some of the most comprehensive in the industry. It is completely searchable and can be referenced either in a task-based manner—what task do you want to accomplish?—or as a conventional reference. The popular Microsoft Developer Network (MSDN) Library CD is integrated with the documentation for Visual C++.
Command bars
The development environment sports the same command bar interface as Microsoft Office 97, with configurable, dockable menu bars and intuitive icons in the menus. These remind a developer about the function of a command and the way to access it using a toolbar shortcut. 
Internet Support
Microsoft Visual C++ supports the Internet in these ways:
- Active Platform development. Resilient, scalable architectures combine content, scripting, components, and secure system services over distributed COM. For more about the Active Platform, see the Web site at www.microsoft.com/VisualTools/ActivePlatform.htm.
- Small, fast controls. MFC&T classes help developers quickly create small ActiveX Controls that require fewer resources than did earlier versions of OLE Controls, and therefore allow for faster downloading and a better user experience. These controls conform to the OCX96 specification, which includes windowless controls, optimized painting, and other features. 
- Internet browsing features. MFC&T offers complete support for the new Win32® Internet system library (WinINet), making it easy to add Internet browser-like features to corporate client applications, including HTTP browsing, FTP file transfer, ActiveX Controls, and gopher searching. You can read more about the new Win32 Internet system library, on the Web site at www.microsoft.com/intdev/sdk/docs/wininet/.
- Extensions and filters. Developers can customize their Internet and intranet servers with Internet Server API (ISAPI) extensions and filters that take specific actions when designated events occur. 
- Internet classes. MFC&T includes classes for common Internet objects such as WinINet, Winsock, ISAPI extensions and filters, URL monikers, and asynchronous property download (data paths).
- Microsoft Internet Explorer. Visual C++ includes Microsoft Internet Explorer, the award-winning, Java-enabled browser with the just in time (JIT) Java compiler, the winner of major reviews and the browser used by major online services. You can read more about Microsoft Internet Explorer, on the Web site at www.microsoft.com/ie/.
Platform Support
Microsoft Visual C++ version 5.0 offers support for several Microsoft frameworks and technologies that provide rich functionality to an application or component.
- COM. The Component Object Model, or COM, is a specification and set of Application Programming Interfaces (APIs) that enable writing small objects that can be versioned and distributed, and are location and language neutral. COM objects are part of the ActiveX core technologies. They make an attractive way to package functionality so it can be used by applications or applets written in C++ or other languages. You can see a code example showing the improved Visual C++ support for COM in the "Component Object Model Support" section in this reviewers guide. You can read the COM specification on the Web site at www.microsoft com/oledev/olecom/title.htm
- ActiveX. ActiveX is a set of language-independent interoperability technologies that enable software components written in different languages to work together in networked environments. The core technology elements of ActiveX are COM and DCOM. These technologies are licensed to the Open Group standards organization, and are being implemented on multiple platforms. Using these components, a developer can create an active Web site, thus offering a richer user experience. An example of such a site is www.investor.msn.com/contents.asp. This site includes a stock-ticker ActiveX Control. You can read more about the Open Group on the Web site at www.activex.org/. 
- Microsoft Foundation Classes and Templates (MFC&T). MFC offers support for document-view architecture Windows applications, many complex abstractions that enable writing desktop applications more quickly, and a tight integration with the wizards in Visual C++. Additionally, in this release, MFC includes the Active Template Library for building small COM objects.
- Microsoft Transaction Server. MTS provides a multi-tier architecture for distributed component coordination, using all of the new distributed COM features in the Windows 95 and Windows NT operating systems. Visual C++ specifically supports the MTS programming model in the ATL Object Wizard. This wizard helps a developer create MTS-compliant COM objects.
Standards Support
Microsoft Visual C++ supports common industry standards, so companies can use it as a universal development tool. Visual C++ supports the following APIs and standards: ActiveX, ANSI C, ANSI C++ (Draft), COM, DAO, MFC, IEEE 754 (floating point specification), HTML, MAPI, and ODBC.
Productivity 
Many features in Visual C++ save development time with advanced code visibility, generation, and reuse.
- Wizards. Visual C++ introduced the concept of a visual code-generating wizard in the context of a software development tool. Visual C++ wizards can be categorized in two major groups: Those that create applications from scratch—AppWizards—and those that continue adding to applications during the life cycle of a project—ClassWizards. Using AppWizards, a developer can create anything from a multiple document interface (MDI) application for Windows to an ISAPI Extension DLL. Using ClassWizard and WizardBar, a developer can map Windows messages to message-handler functions and can override MFC virtual functions.
- ClassView. Using the ClassView feature—introduced in Visual C++ version 4.0—a developer can inspect the structure of a program from the perspective of the kind of objects being created. This information is available without building the project. Not only is ClassView a browser, a developer can also use it to add new member functions and member variables to classes already defined.
- COM Editing. An extension to ClassView, Visual COM Editing displays COM interfaces much as it displays classes. The properties and methods that comprise the interfaces are displayed in much the same manner as class members. Just as a developer can add a member function or variable to a C++ class, a COM property or method can be added to a COM object. This breakthrough technology can save writing lines of tedious code, editing IDL files, and keeping the C++ wrapper in sync with the declared COM interface.
- AppWizard Wizard. Visual C++ comes with an AppWizard that a developer can use to create custom AppWizards for future use. This is ideal for writing a wizard to create a skeleton application that uses an add-on class library or that adheres to a team programming standard.
- Components and Controls Gallery. The Components and Controls Gallery, first introduced in Visual C++ version 4.0 as Component Gallery, is a repository for storing C++ classes, ActiveX Controls, and small wizards for reuse. A developer can save classes for later reuse in the Gallery, or take "snapshots" of these classes and share them with others on the project team. This Gallery is also a one-stop shopping center for ActiveX Controls.
- InstallShield5 Free Edition. The new InstallShield5 Free Edition makes it easy to provide setup programs with uninstall support, which is required for Windows 95 logo compliance. This tool’s interface is similar to Visual C++, making it intuitive to use.
- Microsoft Developer Network. The Professional and Enterprise Editions include the award-winning Microsoft Developer Network (MSDN) Library CD with sample code, the knowledge base, bug lists, the latest technology specifications, product documentation, books and periodicals, and conference papers. You can read more about MSDN on the Web site at www.microsoft.com/MSDN/subscribe. 
- Samples, Samples, Samples. As in past versions of Visual C++, version 5.0 contains more samples and more comprehensive samples. These are cross-referenced in the online documentation for ease of use.
- Extensive Documentation. Visual C++ includes the tutorials and samples that professional developers need for quick learning and productivity, as well as extensive documentation, Help, online books, and the complete MSDN Library CD.
Microsoft Foundation Classes and Templates
In Visual C++ version 5.0, Microsoft introduces the Microsoft Foundation Classes and Templates (MFC&T) version 5.0. MFC&T’s components are described below.
Microsoft Foundation Classes
MFC, long the cornerstone of Windows development, is the de facto class library standard for C++ on the Windows platform and is licensed by major C++ vendors. The newest MFC is backward compatible and contains all the changes introduced to support the Internet, as well as bug fixes since the last release. The binaries and applications built with it can be redistributed freely.
MFC is the class library of choice for creating world-class Windows-based applications for Windows 95 and Windows NT. Applications built with the included 120,000 lines of MFC source can be ported to many varieties of Unix, MS-DOS®, Win32s, OS/2, and others using third-party tools. 
Active Template Library
The Active Template Library, now part of MFC&T, is a relative newcomer to the Microsoft family of libraries. This library was created to answer a need. Developers wanted to create extremely lean, handcrafted COM components. With the ATL, this is easy to do. However, to conserve code size and run-time footprint, some of the framework abstractions available to a programmer using the full MFC library are not available.
ATL is the library of choice for creating incredibly fast, extremely lean COM components and non-visual, or UI-less servers, where performance and size are premiums.
The Active Template Library was developed to create quick, lean COM objects. However, because it was initially an add-on library, it was not fully supported by the Visual C++ wizards. Now, with ATL merged into MFC&T, it is supported by an AppWizard, the ATL Object Wizard, and the Visual COM Editing feature. A developer can use the AppWizard to start the project. The ATL Object Wizard then initially defines an object—there can be as many objects as desired in a single DLL. The developer can use WizardBar to add ATL classes and Visual COM Editing to add properties and methods to any interface.
C/C++ Run-time Libraries
In each release of Visual C++, the run-time libraries are improved. There are several marked improvements since Visual C++ version 4.0 in improved memory allocation.
The memory allocation techniques in Visual C++ version 4.0 were relatively simple wrappers around the Win32 heap manager. While this had the advantage of simplicity, it introduced some inefficiency when dealing with the frequent allocation and de-allocation of small memory blocks. Additionally, the performance of applications varied widely between Windows 95 ad Windows NT. To mitigate this problem, Microsoft introduced a scheme of sub-allocating from a pool of memory for small blocks, but going directly to the operating system for larger ones. The result is dramatic speed improvements for applications that perform frequent heap operations on small blocks of memory.
A new release of the C++ Standard Library, including the Standard Template Library, is included in Visual C++ 5.0. This version is thread-safe and tracks the work being done in the ANSI/ISO committee. To supplement the new release, the documentation has been augmented to include many examples.
Compilation System Features
The compilation system comprises the compiler—the part that understands C++, the code generator—the part that can write machine code for a specific platform, and the linker. These are discussed in the sections, "ANSI/ISO C++ Conformance" and "New C++ Language Optimizations." Because the linker is part of the generation of the final executable image, it is covered in the latter section.
ANSI/ISO C++ conformance
The compiler has new features, not the least of which involve significant bug fixes and changes to be more conformant with the evolving ANSI/ISO Working Paper.
The C++ compiler now supports the new keywords true, false, typename, mutable and explicit, as well as the bool type. 
Template pre-parsing has been added to handle a number of cases where templates were not in conformance with the ANSI/ISO Working Paper. This feature also supports better error detection.
As compared to Visual C++ version 4.0, the namespace support is improved and has been brought in line with the ANSI/ISO Working Paper.
Visual C++ version 4.0 included a public domain copy of the C++ Standard Template Library. A more complete version, which better tracked the proposed ANSI standard, was introduced in Visual C++ version 4.2. In Visual C++ version 5.0, this same library has been improved to bring it more closely into conformance with that standard. This implementation, by P.J. Plaugher, is recognized as one of the leading implementations in the C++ tools industry. P.J. Plaugher is one of the foremost members of the X3J16 for Standardization of the C++ Language. This version of the C++ Standard Library, including the Standard Template Library, is thread-safe, making it an excellent choice for run-time support of C++ programs.
New C++ language optimization features
The Visual C++ optimizing compiler has long been the industry standard for code quality. In Visual C++ version 5.0, the optimizer has been entirely rewritten to provide significant gains just by recompiling. Because it is smaller, the code executes more quickly on virtual-memory operating systems, such as the Windows 95 and Windows NT operating systems.
The results depend largely on the kind of code that is recompiled—Microsoft Office applications realized a size reduction of some 10%. Other codebases have reported in excess of a 25% size reduction. It is hard to overstate the importance of these gains. To a developer, these gains are essentially free with a recompile. The compiler does the optimizing work, so the developer is free to concentrate on writing code.
The code generated by the new compiler also is improved for speed, uses new linker optimizations, and adds Intel MMX and Pentium Pro support. The net win for developers is extremely significant. You can read more about these new chips on the Web site at www.developer.intel.com/design/mmx
Also new in the Visual C++ version 5.0 compiler is the optimization of exception handling. The overhead of exception handling has been reduced by optimizations designed to eliminate stack-frame setup where unwinding is not required. This continues a tradition of optimizations only available from Microsoft that address the unique structure of C++ programs. Other compilers perform scalar optimizations well, and they benchmark well on standard procedural code. However, when the benchmark involves using C++ features, as the OOPACK benchmark does, the optimization quality of the Visual C++ compiler shines through. For more about the benchmarks for Visual C++ version 4.2, see the Windows Developer’s Journal, October and November 1996 issues.
You can read more about the OOPACK benchmark on the Web site at www.kai.com/oopack/oopack.html.
Component Object Model Support
This section contains a code example that shows the improved support for COM programming in Visual C++ 5.0.
Any C++ program can become a COM client transparently—just import a COM object and declare it—breaking new ground in C++ programming. The difference between programming a COM client with and without these extensions is striking. Given a COM object that converts temperatures and has two properties, Fahrenheit and Celsius, a developer can access this object with the code below. For reference, a partial implementation of the same code written without the native COM support follows later in this section.
///////////////////////////////////////////////////////
//
// ShowConv.cpp : Program to show the results of
// temperature conversions performed
// by the TempConv COM object.
//
// The TempConv COM Object
// -----------------------
//
// Properties:
//
// Fahrenheit: Temperature in Fahrenheit
// degrees (r/w)
// Celsius: Temperature in Celsius
// degrees (r/w)
//
// When either property is changed, the other is
// adjusted to reflect the equivalent temperature.
//
///////////////////////////////////////////////////////
 
#import 
#include 
// Create an object that starts OLE when the program starts
// and stops it before the program exits.
struct StartOle{
&#9;StartOle() { OleInitialize(NULL); }
&#9;~StartOle() { OleUninitialize(); }
} StartOleObj;
 
void main()
{
&#9;// Select the namespace of our COM object to prevent
&#9;// collisions the object’s names and names local to
&#9;// the program.
 
&#9;using namespace TEMPCONVLib;
 
&#9;// Create an instance of the COM object
 
&#9;ITempConv1Ptr TempConvPtr(__uuidof(CTempConv1), NULL, CLSCTX_ALL);
 
&#9;// Loop through a range of temperatures showing conversions.
&#9;// Note that the properties Celsius and Fahrenheit are simply 
&#9;// accessed as class members using the -> member-selection operator.
 
&#9;for(double celsius = 0.0; celsius Celsius = celsius;
&#9;&#9;printf("\ncelsius: %f3.1\tfahrenheit: %f3.1",
&#9;&#9;&#9;TempConvPtr->Celsius, TempConvPtr->Fahrenheit);
}
}
 
These lines of code are all that are required. Note the use of the new preprocessor directive, #import. This allows importing various kinds of type information: a typelib, a COM component DLL, and so on. The #import directive has the same meaning in Visual J++. The compiler creates an interface class and implementation code so new objects of the COM component type can be declared.
After such an object is declared, the code is executed behind the scene to perform a CoCreateInstance of that object and to cause it to be instantiated. It is then as simple as accessing the properties as member variables and the methods as member functions. All of this is done without calling QueryInterface, AddRef, or Release. That is all managed by Visual C++.
By extension, any client can use any object, be it local or remote, using DCOM or deployed using the Microsoft Transaction Server. Visual C++ version 5.0 also adds Visual COM Editing and language-independent COM browsing.
By contrast, the following code illustrates a fraction of the work to access this simple COM object without the native COM support. 
// Before beginning don't forget to:// 1. Copy MIDL generated header file to this directory// 2. Copy MIDL generated proxy/stub files to this directory.// 3. Add proxy/stub files to project// 4. Turn off proxy/stub files precompiled headers
// 5. Locate CLSID, IID, and interface name for all interfaces
// 6. Include a file with a conversion to OLECHAR.
// 7. Don't forget to include the MIDL header file in your .CPP code.
IUnknown* pUnk = NULL;
HRESULT hr;
 
hr = ::CoCreateInstance(CLSID_CTempConv, NULL, 
&#9;CLSCTX_INPROC_SERVER,&#9;IID_IUnknown, (LPVOID*)&pUnk);if (SUCCEEDED(hr)){&#9;ITempConv1* pConv = NULL;&#9;ASSERT(pUnk != NULL);&#9;hr = pUnk->QueryInterface(IID_ITempConv1, (LPVOID*)&pConv);
 
&#9;if (SUCCEEDED(hr))
&#9;{
&#9;&#9;ASSERT(pConv != NULL);
&#9;&#9;// Access properties using get_ and put_ fuctions.
&#9;&#9;// Do not forget to convert from C++ to OLE types.&#9;&#9;&#9;pConv->Release();&#9;&#9;pConv = NULL;&#9;}&#9;p->Release();&#9;p = NULL;}
Setup by InstallShield
As in past versions of Visual C++, Microsoft has teamed up with InstallShield to bring versions of their industry-standard InstallShield setup tool to developers’ desktops. Using this new version, InstallShield5 Free Edition, a developer can create setup programs quickly and easily, complete with uninstall, which is required for the Microsoft Windows 95 logo. You can read more about InstallShield products on the Web site at www.installshield.com.
Enterprise Edition Client/Server Support
Visual C++ 5.0, Enterprise Edition includes all of the features of Visual C++ 5.0, Professional Edition and adds many client/server features and tools.
- Visual Schema design and table editing. This new, visual feature, makes it simple to manage a database during development without leaving Visual C++. Using the designer, a developer can view the relationships between tables, edit table definitions, or examine data. 
- Great SQL support. The Enterprise Edition makes it easier to build and deploy the SQL language components in the server portion of client/server applications. With the enhanced Data View feature, a developer can view any ODBC data and create and edit stored database procedures and the C++ functions that call them, all from the same development environment.
- Integrated Microsoft SQL Server debugging. One of the biggest obstacles to developing high-quality client/server applications has been the inability to debug an application executing a stored procedure on a database server in conjunction with its associated client application. The Enterprise Edition is the first C++ development tool to offer an integrated debugger that can step from C++ code executing on a client computer to a stored procedure executing on a remote computer running Microsoft SQL Server&#8482;.
- Better database programming support. MFC&T has enhanced open database connectivity (ODBC) classes. The enhanced classes are thread-safe, support transactions, and have performance optimizations that increase throughput on such operations as bulk adds. These features make it easier to write high-performance database applications using database-independent protocols. In addition, the Enterprise Edition now offers support for data-bound controls—controls with built-in database connectivity. Therefore, adding database connectivity to C++ applications is now as easy as it is with applications coded with Visual Basic.
- Microsoft Transaction Server Developer Edition 1.0. The Enterprise Edition includes the new Microsoft Transaction Server, Developer Edition, which is also useful as a distributed coordinator of ActiveX Controls. Visual C++ supports direct access to threading models and asynchronous events, and supports tuning the smallest possible distributed components with ATL. You can read more about the Microsoft Transaction Server on the Web site at www.microsoft.com/transaction/.
- Microsoft SQL Server Developer Edition 6.5. The Developer Edition of Microsoft SQL Server, the leading database management system for Windows NT, is part of the Enterprise Edition. You can read more about SQL Server on the Web site at www.microsoft.com/SQL/.
- Microsoft Visual SourceSafe 5.0. The Enterprise Edition includes a team development tool, Microsoft Visual SourceSafe®, which is the leading source-code control system for Windows, and supports Intersolv PVCS, Atria ClearCase, MKS Source Integrity, and other source-code control systems. You can read more about Microsoft Visual SourceSafe on the Web site at msdn.microsoft.com/ssafe/.
System Requirements
The system requirements for using Microsoft Visual C++ version 5.0 are:
- A personal computer with a 486/66 or faster processor (Pentium 90 recommended) running Microsoft Windows 95 or Microsoft Windows NT Workstation version 4.0 or later.
- Microsoft Internet Explorer 3.0 or later (included).
- 20 MB of available RAM (32 MB recommended) for Windows 95 installations and 24 MB of available RAM (32 MB recommended) for Windows NT installations.
- Disk space and additional RAM requirements:
	Installation 
	Professional 
	Enterprise 
	Typical 
	175 MB 
	180 MB 
	Minimum 
	120 MB 
	125 MB 
	CD-ROM 
	50 MB 
	60 MB 
	Maximum 
	500 MB 
	550 MB 
Additional requirements for Enterprise Edition Tools
	Installation 
	Professional 
	Enterprise 
	Microsoft SQL Server 6.5, Developer Edition 
	RAM required for Replication 
	N/A 
	32 MB 
	Installation without Books Online 
	N/A 
	80 MB 
	Installation with Books Online 
	N/A 
	95 MB 
	Microsoft Transaction Server 
	RAM 
	N/A 
	32 MB 
	Installation 
	N/A 
	30 MB 
	Visual SourceSafe 
	Typical 
	N/A 
	16 MB 
	Minimum 
	N/A 
	20 MB 
- A CD-ROM drive with 32-bit protected mode CD-ROM drivers.
- A VGA or higher-resolution adapter and monitor (Super VGA recommended).
- Microsoft Mouse or compatible pointing device.
- Modem or other connection to the World Wide Web (recommended).
Training, Support, and Further Information
Visitors to the Visual C++ product Web site at http://msdn.microsoft.com/visualc/ can stay on top of the latest Visual C++ technology with the most current FAQs, white papers, samples, and case studies. To send Visual C++ product ideas or ask non-technical business questions, send e-mail to msvc@microsoft.com. 
On the Web, there are more books, magazines, training courses, support vendors, and events about Visual C++, MFC, and ATL than about any other C++ development tool or class library. Further, many companies are producing software that is specifically designed to work with Visual C++. 
There is a worldwide network of Microsoft-approved Solution Providers, who can help a developer create a complete application using Microsoft products, including Visual C++. For extremely advanced applications, developers can call on Microsoft Consulting Services to fill in some high-end technical expertise.
As a member of Microsoft Visual Studio 97, Visual C++ is part of a select group of developer tools. 
	
	
	 
	
	
Microsoft Visual C++ for Windows CE Reviewers Guide
Introduction
Microsoft Windows® CE is a high-end, open, scalable Windows operating system platform designed for a broad range of communication, entertainment, and mobile computing devices. It makes possible new categories of non-PC hardware devices, such as hand-held personal computers or HPCs, that communicate with each other, share data with Windows-based PCs, and connect to the Internet.
To facilitate compatibility between Windows CE-based devices and desktop PCs running Windows 95, both platforms use the Microsoft Windows programming model. Both operating systems support a version of the Microsoft Win32® API with a wide and varied set of functions, messages, and structures. Support for Win32 common controls allows applications on Windows CE platforms to have the look and feel of Windows 95 applications. This also means that Windows CE-based applications can freely share data with companion applications that run on Windows 95.
However, there are differences between Windows 95 and Windows CE. For instance, there are fewer functions and structures to learn because Windows CE supports only a subset of the Win32 API functions supported by Windows 95. Windows 95 supports over a thousand function calls while Windows CE supports less than half of that number. 
The biggest differences between programming for Windows CE and Windows 95 are created by the hardware constraints posed by the miniature footprint of Windows CE-based devices. Limited memory, the lack of easily accessible static storage, a restricted power supply, the small landscape-oriented display, and alternative input devices such as miniaturized keyboards and touch screens, all present an assortment of challenges to programmers. 
Some of the existing Win32 API functions and structures have been changed for Windows CE to help developers overcome these roadblocks, and some new ones have been added take advantage of capabilities unique to Windows CE. 
Since the Windows CE operating system is based on a subset of the Win32 API, with the addition of some Windows CE-specific functions, developers will find programming for it very similar to programming for Windows NT or Windows 95. It is unnecessary to learn how to deal with an entirely new operating system. 
If a developer already has an application written for the Windows 95 or Windows NT platforms that would be suitable for Windows CE, it may be portable with much less effort than starting from scratch. However, the constraints imposed by the handheld PC hardware mean that many if not most programs written for desktop computers will have to be modified to run successfully and efficiently. These hardware limitations may vary with manufacturer.
Visual C++ for Windows CE
In addition to the current feature set of Microsoft Visual C++ version 5.0, Microsoft Visual C++ for Windows CE includes: 
- A special edition of the Developer Studio IDE, customized for Windows CE project development. 
- Enhanced packages for simultaneous cross-development onto multiple Windows CE platforms.
- A new integrated cross-development environment for embedded programming.
A developer can develop embedded programs for HPCs while working within the same integrated environment that supports development of Win32 applications.
Microsoft Visual C++ 5.0 for Windows CE provides an overlay of packages so a programmer can develop applications for multiple targets simultaneously. On an i86 host computer, a developer can build programs from a single Makefile for execution and debugging in any or all of the following environments in addition to standard Win32:
- Windows CE Emulation Environment (i86EM)
- Windows CE SH3 target device (WCESH)
- Windows CE MIPS target device (WCEMIPS)
Visual C++ 5.0 for Windows CE Tools
The Visual C++ 5.0 for Windows CE Tools menu includes a suite of Windows applets designed to simplify cross-development on remote HPCs. If a developer already knows tools such as Spy, Zoomin, Regedit, and Memview, then the new remote versions of these tools will be familiar and easy to use.
IDE Startup Options
The IDE runs in two modes, depending on how it is started. One mode enables debugging in the native and emulation environments; the other enables remote debugging on the HPC.
- msdev.exe starts the IDE with native and emulation debugging enabled.
- msdev.exe -wce starts the IDE with remote debugging enabled. 
In all other respects, both versions have the same functionality. Either version can compile, link, execute, and so forth, both in emulation mode and on the remote device. Only if a developer wants to debug on a different target might it be necessary to restart the IDE in the other mode.
Developing Applications Simply
Here is a list to use as quick reference to see how completely the Visual C++ version 5.0 for Windows CE tool addresses building applications for the hand-held platform.
- Getting Started. A developer does not need an HPC to begin developing Windows CE applications. Just launch Visual C++ for Windows CE and from File, choose New, and then Project Workspace.
- Choose a Project Type. Application, Dynamic Link Library, Static Library, and Makefile are supported project types for Windows CE. Currently, MFC, OLE, Console Application, and Custom AppWizards are not yet supported.
- Choose a Target platform(s). A developer can choose between Win32 (x86EM): emulation on an x86 host, Win32 (WCEMIPS): R4100 target device, Win32 (WCESH): SH3 target device, or Win32: standard Win32 API.
- Write the Program. Use the Win32 for Windows CE API set and the common Windows CE C run-rime functions for maximum portability across platforms.
- Build the Program. Each target builds with the appropriate compiler and libraries. Flags and options default automatically for debug and release versions for each target platform. To modify these defaults, from Build, choose Settings.
- Execute and Debug in Emulation. See how the program runs and use the integrated visual debugger before attaching an HPC.
- Attach the HPC. See release notes for details on remote hardware configurations.
- Execute and Debug Remotely. Start the remote debugging version of the IDE, msdev -wce, to enable remote debugging. Use remote versions of Spy, RegEdit, MemView, and Zoomin and other remote tools.
Conclusion
The introduction of Windows CE has opened vast inroads to the future of mobile computing. The hand-held PC is a great example of how the future of mobile computing is here now. Microsoft Visual C++ for Windows CE builds upon the knowledge base of hundreds of thousands developers who develop applications for the Windows platform.
With the addition of Microsoft Visual C++ for Windows CE to the Visual Tools family, developers obtain a complete solution for integrating mobile computing into their programming tasks.
	 
 
 
 	
	
	
	
	 
	
	
	 
	
	
 
 
 
 	
	 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
	
	
	
	
	
	
	 
	Contact Us 
	 
	
	
	
	
	 
	
	
	
	
	
	
	
	 
	© 2002 Microsoft Corporation. All rights reserved. Terms of Use. 
	 
	Privacy Statement 
	 
	Accessibility 
	 
	
	
	 
	
	
	
 
 
 
 
 
 
 
