
C++ Tutorial: 5.4: Advanced Class Type-casting 
 Section 5.4 
 Advanced Class Type-casting
 
 
 
 
Until now, in order to type-cast a simple object to another we have used
the traditional type casting operator. For example, to cast a floating point number
of type double to an integer of type int
we have used:
int i;
double d;
i = (int) d;
or also
i = int (d);
This is quite good for basic types that have standard defined conversions,
however this operators can also been indiscriminately applied on classes
and pointers to classes. So, it is perfectly valid to write things like:
// class type-casting
#include 
class CDummy {
 int i;
};
class CAddition {
	int x,y;
 public:
	CAddition (int a, int b) { x=a; y=b; }
	int result() { return x+y;}
};
int main () {
 CDummy d;
 CAddition * padd;
 padd = (CAddition*) &d;
 cout result();
 return 0;
}
 
 
 
Although the previous program in sintactically correct in C++
(in fact it will compile with no warnings on most compilers)
it is a code with not much sense since we use
function result, that is a member of CAddition,
without having been declared any object of that class:
 padd is not an object, it is only
a pointer which we have assigned the address of a non related object.
When accessing its result
member it will produce a run-time error or, at best, just an unexpected result.
In order to control these types of conversions between classes,
ANSI-C++ standard has defined four new casting operators:
reinterpret_cast, static_cast, dynamic_cast
and const_cast.
All of them have the same format when used:
reinterpret_cast (expression)
 dynamic_cast (expression)
 static_cast (expression)
 const_cast (expression)
Where new_type is the destination casting type that
expression has to be casted to. To make an easily understandable
parallelism with traditional type-casting operators these expression mean:
(new_type) expression
new_type (expression)
but with their own special characteristics.
reinterpret_cast
reinterpret_cast casts a pointer to any other type of pointer.
It also allows casting from pointer to an integer type and vice versa.
This operator can cast pointers between non-related classed.
The operation results is a simple binary copy of the value from a pointer to the other.
The content pointed does not pass any kind of check nor transformation between types.
In the case that the copy is performed from a pointer to an integer, the
interpretation of its content is system dependent and therefore any implementation is
non portable.
A pointer casted to an integer enough large to fully contain it can be
casted back to a valid pointer.
class A {};
class B {};
A * a = new A;
B * b = reinterpret_cast(a);
reinterpret_cast treats all pointers exactly as traditional
type-casting operators do.
static_cast
static_cast allows to perform any casting
that can be implicitly performed as well as also
the inverse cast (even if this is not allowed implicitly).
Applied to pointers to classes, that is to say that it allows to cast a pointer of a derived
class to its base class (this is a valid conversion that can be implicitly performed)
and can also perform the inverse: cast a base class to its derivated class.
In this last case the base class that is being casted is not checked to
determine wether this is a complete class of the destination type or not.
class Base {};
class Derived: public Base {};
Base * a = new Base;
Derived * b = static_cast(a);
static_cast, aside from manipulating pointers to classes,
can also be used to perform conversions explicitly defined in classes,
as well as to perform standard conversions between fundamental types:
double d=3.14159265;
int i = static_cast(d);
dynamic_cast
dynamic_cast is exclusively used with pointers and references to objects.
It allows any type-casting that can be implicitly performed as well as
the inverse one when used with polymorphic classes, however, unlike
static_cast, dynamic_cast checks, in this last case,
if the operation is valid. That is to say, it checks if the casting
is going to return a valid complete object of the requested type.
Checking is performed during run-time execution. If the pointer being casted
is not a pointer to a valid complete object of the requested type, the value
returned is a NULL pointer.
class Base { virtual dummy(){}; };
class Derived : public Base { };
 
Base* b1 = new Derived;
Base* b2 = new Base;
Derived* d1 = dynamic_cast(b1); // succeeds
Derived* d2 = dynamic_cast(b2); // fails: returns NULL
If the type-casting is performed to a reference type and this casting is not possible
an exception of type bad_cast is thrown:
class Base { virtual dummy(){}; };
class Derived : public Base { };
 
Base* b1 = new Derived;
Base* b2 = new Base;
Derived d1 = dynamic_cast(b1); // succeeds
Derived d2 = dynamic_cast(b2); // fails: exception thrown
const_cast
This type of casting manipulates the const attribute of the passed object,
either to be set or removed:
class C {};
const C * a = new C;
C * b = const_cast (a);
Neither of the other three new cast operators can modify the
constness of an object.
typeid
ANSI-C++ also defines a new operator called typeid that allows
to check the type of an expression:
typeid (expression)
this operator returns a refernece to a constant object of type type_info
that is defined in standard header file .
This returned value can be compared with another using operators ==
and != or can serve to obtain a string of characters
representing the data type or class name by using its name() method.
// typeid, typeinfo
#include 
#include 
class CDummy { };
int main () {
 CDummy* a,b;
 if (typeid(a) != typeid(b))
 {
 cout 
 Previous:
5-3. Exception handling. 
 
 index 
 
 Next:
5-5. Preprocessor directives.
 
